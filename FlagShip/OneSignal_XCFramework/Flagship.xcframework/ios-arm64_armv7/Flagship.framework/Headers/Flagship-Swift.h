#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef FLAGSHIP_SWIFT_H
#define FLAGSHIP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Flagship",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// :nodoc:
SWIFT_CLASS("_TtC8Flagship10FSAudience")
@interface FSAudience : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumeration that represent Events type
typedef SWIFT_ENUM(NSInteger, FSCategoryEvent, open) {
/// Action tracking
  FSCategoryEventAction_Tracking = 1,
/// User engagement
  FSCategoryEventUser_Engagement = 2,
};

enum FlagshipMode : NSInteger;
@class NSNumber;

/// This class will represent
SWIFT_CLASS("_TtC8Flagship8FSConfig")
@interface FSConfig : NSObject
/// Config object that represent all customized
/// \param mode The start car run under the bukceting or decision Api mode. The default mode is DECISION_API
///
/// \param apiTimeout Time for the sdk to wait response from the getCampaign request. The default timeout is 2 seconds
///
- (nonnull instancetype)init:(enum FlagshipMode)mode timeout:(NSTimeInterval)timeout authenticated:(BOOL)authenticated OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FSTypeTrack : NSInteger;
@class NSString;

/// :nodoc:
SWIFT_PROTOCOL("_TtP8Flagship18FSTrackingProtocol_")
@protocol FSTrackingProtocol
@property (nonatomic, readonly) enum FSTypeTrack type;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified fileName;
/// Get cst
- (NSNumber * _Nullable)getCst SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS("_TtC8Flagship10FSTracking")
@interface FSTracking : NSObject <FSTrackingProtocol>
- (NSNumber * _Nullable)getCst SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified fileName;
@property (nonatomic) enum FSTypeTrack type;
/// User Ip
@property (nonatomic, copy) NSString * _Nullable userIp;
/// Screen Resolution
@property (nonatomic, copy) NSString * _Nullable screenResolution;
/// Screen Color Depth
@property (nonatomic, copy) NSString * _Nullable screenColorDepth;
/// User Language
@property (nonatomic, copy) NSString * _Nullable userLanguage;
/// Session Number
@property (nonatomic, strong) NSNumber * _Nullable sessionNumber;
@property (nonatomic, strong) NSNumber * _Nullable sessionEventNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull communBodyTrack;
@end


/// Represents an event
SWIFT_CLASS("_TtC8Flagship7FSEvent")
@interface FSEvent : FSTracking
/// description of the event.
@property (nonatomic, copy) NSString * _Nullable label;
/// value of the event, must be non-negative.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// Init Event object
/// @param eventCategory :FSCategoryEvent
/// @param eventAction :String
/// @return instance object
- (nonnull instancetype)initWithEventCategory:(enum FSCategoryEvent)eventCategory eventAction:(NSString * _Nonnull)eventAction OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end


/// Represent item with a transaction. It must be sent after the corresponding transaction.
SWIFT_CLASS("_TtC8Flagship6FSItem")
@interface FSItem : FSTracking
/// Specifies the item price
@property (nonatomic, strong) NSNumber * _Nullable price;
/// Specifies the item quantity
@property (nonatomic, strong) NSNumber * _Nullable quantity;
/// Specifies the item category
@property (nonatomic, copy) NSString * _Nullable category;
/// Init Item object
/// @param transactionId :String
/// @param name :String
/// @return instance object
- (nonnull instancetype)initWithTransactionId:(NSString * _Nonnull)transactionId name:(NSString * _Nonnull)name code:(NSString * _Nonnull)code OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end


SWIFT_CLASS("_TtC8Flagship6FSPage") SWIFT_AVAILABILITY(ios,introduced=1.0,deprecated=2.0.4,message="FSScreen")
@interface FSPage : FSTracking
/// Init Page hit
/// @param location String
/// @return instance object
- (nonnull instancetype)init:(NSString * _Nonnull)location OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end


/// <code>PresetContext</code> class that represent a predefined keys of context
SWIFT_CLASS("_TtC8Flagship15FSPresetContext")
@interface FSPresetContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This hit should be sent each time a visitor arrives on a new screen.
SWIFT_CLASS("_TtC8Flagship8FSScreen")
@interface FSScreen : FSTracking
/// Init Screen hit
/// @param location String
/// @return instance object
- (nonnull instancetype)init:(NSString * _Nonnull)location OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end




/// Represent a hit Transaction
SWIFT_CLASS("_TtC8Flagship13FSTransaction")
@interface FSTransaction : FSTracking
/// Total revenue associated with the transaction. This value should include any shipping or tax costs
@property (nonatomic, strong) NSNumber * _Nullable revenue;
/// Specifies the total shipping cost of the transaction.
@property (nonatomic, strong) NSNumber * _Nullable shipping;
/// Specifies the total taxes of the transaction.
@property (nonatomic, strong) NSNumber * _Nullable tax;
/// Specifies the currency used for all transaction currency values. Value should be a valid ISO 4217 currency code.
@property (nonatomic, copy) NSString * _Nullable currency;
/// Specifies the coupon code used by the customer for the transaction.
@property (nonatomic, copy) NSString * _Nullable couponCode;
/// Specifies the payment method for the transaction.
@property (nonatomic, copy) NSString * _Nullable paymentMethod;
/// Specifies the shipping method of the transaction.
@property (nonatomic, copy) NSString * _Nullable shippingMethod;
/// Specifies the number of items for the transaction.
@property (nonatomic, strong) NSNumber * _Nullable itemCount;
/// Init transaction object
/// @param transactionId String
/// @param affiliation String
/// @return instance object
- (nonnull instancetype)initWithTransactionId:(NSString * _Nonnull)transactionId affiliation:(NSString * _Nonnull)affiliation OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, FSTypeTrack, open) {
  FSTypeTrackSCREEN = 0,
  FSTypeTrackTRANSACTION = 1,
  FSTypeTrackITEM = 2,
  FSTypeTrackEVENT = 3,
  FSTypeTrackNone = 4,
};

enum FlagshipResult : NSInteger;

/// <code>FlagShip</code> class helps you run FlagShip on your native iOS app.
SWIFT_CLASS("_TtC8Flagship8Flagship")
@interface Flagship : NSObject
/// Enable Logs, By default the log is enabled
@property (nonatomic) BOOL enableLogs;
@property (nonatomic) BOOL disabledSdk;
/// Shared instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Flagship * _Nonnull sharedInstance;)
+ (Flagship * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Start FlagShip
/// @param envId String environmentId id for client
/// @param apiKey String provided by abtasty apiKey
/// @param visitorId String visitor id @optional
/// @param FSConfig Object config @optional
/// @param onStartDone The block to be invoked when sdk is ready
- (void)startWithEnvId:(NSString * _Nonnull)envId apiKey:(NSString * _Nonnull)apiKey visitorId:(NSString * _Nullable)visitorId config:(FSConfig * _Nonnull)config onStartDone:(void (^ _Nonnull)(enum FlagshipResult))onStartDone;
/// //////////////////////////////////// SHIP VALUES /////////////////////////////////////////////////
/// Get Modification for boolean
/// \code
///  @param key associated with the modification
///  
///  @param default value returned when the key doesn’t match any modification value
///  
///  @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
///  
///  @return Boolean value
///
/// \endcode
- (BOOL)getModification:(NSString * _Nonnull)key defaultBool:(BOOL)defaultBool activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for string
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return String value
- (NSString * _Nonnull)getModification:(NSString * _Nonnull)key defaultString:(NSString * _Nonnull)defaultString activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for Double
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Double value
- (double)getModification:(NSString * _Nonnull)key defaultDouble:(double)defaultDouble activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for Float
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Float value
- (float)getModification:(NSString * _Nonnull)key defaulfloat:(float)defaulfloat activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for the integer
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Int value
- (NSInteger)getModification:(NSString * _Nonnull)key defaultInt:(NSInteger)defaultInt activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for an array
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Array [Any]
- (NSArray * _Nonnull)getModification:(NSString * _Nonnull)key defaultArray:(NSArray * _Nonnull)defaultArray activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for Json (Dictionary)
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Dictionary<String,Any>, represent the json object
- (NSDictionary<NSString *, id> * _Nonnull)getModification:(NSString * _Nonnull)key defaultJson:(NSDictionary<NSString *, id> * _Nonnull)defaultJson activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getModificationInfoWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Activate Modifications values
/// @key key which identifies the modification
- (void)activateModificationWithKey:(NSString * _Nonnull)key;
/// For Objective C Project, use the functions below to send Events
/// See https://developers.flagship.io/ios/#hit-tracking
/// Send Transaction event
/// \code
/// @param transacEvent : Transaction event
///
/// \endcode
- (void)sendTransactionEvent:(FSTransaction * _Nonnull)transacEvent;
/// Send Page event
/// @param pageEvent : Page event
- (void)sendScreenEvent:(FSScreen * _Nonnull)screenEvent;
/// Send Item event
/// @param itemEvent : Item event
- (void)sendItemEvent:(FSItem * _Nonnull)itemEvent;
/// Send event track
/// @param eventTrack : track event
- (void)sendEventTrack:(FSEvent * _Nonnull)eventTrack;
@end


@interface Flagship (SWIFT_EXTENSION(Flagship))
/// Use authenticate methode to go from Logged out  session to logged in session
/// \param visitorId newVisitorId to atuthenticate
///
/// \param visitorContext context for the user
///
/// \param sync callback will be invoked when the synchronize complete, by default the callBack is nil
///
- (void)authenticateVisitorWithVisitorId:(NSString * _Nonnull)visitorId visitorContext:(NSDictionary<NSString *, id> * _Nullable)visitorContext sync:(void (^ _Nullable)(enum FlagshipResult))sync;
/// Use authenticate methode to go from Logged in  session to logged out session
/// \param context input a new context if needed when log-out
///
/// \param onSynchronized Callback is called when the operation complete , by default is nil
///
- (void)unAuthenticateVisitorWithVisitorContext:(NSDictionary<NSString *, id> * _Nullable)visitorContext sync:(void (^ _Nullable)(enum FlagshipResult))sync;
@end



@interface Flagship (SWIFT_EXTENSION(Flagship))
/// //////////////////// Dictionary ///////////////////////////
- (void)updateContext:(NSDictionary<NSString *, id> * _Nonnull)contextValues;
/// // Update context without dictionary //////////////////////
- (void)synchronizeModificationsWithCompletion:(void (^ _Nonnull)(enum FlagshipResult))completion;
/// Get context for the visitor
///
/// returns:
/// Dictionary , an empty one if the context is empty
- (NSDictionary<NSString *, id> * _Nonnull)getVisitorContext SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Dictionary , an empty one if the modification is empty
- (NSDictionary<NSString *, id> * _Nonnull)getAllModification SWIFT_WARN_UNUSED_RESULT;
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, FlagshipError, open) {
  FlagshipErrorNone = 0,
  FlagshipErrorClientId_Error = 1,
  FlagshipErrorGetCampaignError = 2,
  FlagshipErrorStoredEventError = 3,
  FlagshipErrorCetScriptError = 4,
  FlagshipErrorScriptNotModified = 5,
  FlagshipErrorNetworkError = 6,
};

typedef SWIFT_ENUM(NSInteger, FlagshipMode, open) {
/// SDK is running in DECISION_API MODE
  FlagshipModeDECISION_API = 1,
/// SDK is running in BUCKETING MODE
  FlagshipModeBUCKETING = 2,
};

/// FlagShip State
/// <ul>
///   <li>
///     Ready   : The sdk is ready to use
///   </li>
///   <li>
///     NotReady: The not ready to use
///   </li>
///   <li>
///     Updated: The value for flagShip sdk are updated
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, FlagshipResult, open) {
/// Ready The sdk is ready to use
  FlagshipResultReady = 0,
/// The sdk is not ready, See logs for more informations
  FlagshipResultNotReady = 1,
/// Updated completed
  FlagshipResultUpdated = 2,
/// The sdk is disabled
  FlagshipResultDisabled = 3,
};


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef FLAGSHIP_SWIFT_H
#define FLAGSHIP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Flagship",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// :nodoc:
SWIFT_CLASS("_TtC8Flagship10FSAudience")
@interface FSAudience : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumeration that represent Events type
typedef SWIFT_ENUM(NSInteger, FSCategoryEvent, open) {
/// Action tracking
  FSCategoryEventAction_Tracking = 1,
/// User engagement
  FSCategoryEventUser_Engagement = 2,
};

enum FlagshipMode : NSInteger;
@class NSNumber;

/// This class will represent
SWIFT_CLASS("_TtC8Flagship8FSConfig")
@interface FSConfig : NSObject
/// Config object that represent all customized
/// \param mode The start car run under the bukceting or decision Api mode. The default mode is DECISION_API
///
/// \param apiTimeout Time for the sdk to wait response from the getCampaign request. The default timeout is 2 seconds
///
- (nonnull instancetype)init:(enum FlagshipMode)mode timeout:(NSTimeInterval)timeout authenticated:(BOOL)authenticated OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FSTypeTrack : NSInteger;
@class NSString;

/// :nodoc:
SWIFT_PROTOCOL("_TtP8Flagship18FSTrackingProtocol_")
@protocol FSTrackingProtocol
@property (nonatomic, readonly) enum FSTypeTrack type;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified fileName;
/// Get cst
- (NSNumber * _Nullable)getCst SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS("_TtC8Flagship10FSTracking")
@interface FSTracking : NSObject <FSTrackingProtocol>
- (NSNumber * _Nullable)getCst SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified fileName;
@property (nonatomic) enum FSTypeTrack type;
/// User Ip
@property (nonatomic, copy) NSString * _Nullable userIp;
/// Screen Resolution
@property (nonatomic, copy) NSString * _Nullable screenResolution;
/// Screen Color Depth
@property (nonatomic, copy) NSString * _Nullable screenColorDepth;
/// User Language
@property (nonatomic, copy) NSString * _Nullable userLanguage;
/// Session Number
@property (nonatomic, strong) NSNumber * _Nullable sessionNumber;
@property (nonatomic, strong) NSNumber * _Nullable sessionEventNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull communBodyTrack;
@end


/// Represents an event
SWIFT_CLASS("_TtC8Flagship7FSEvent")
@interface FSEvent : FSTracking
/// description of the event.
@property (nonatomic, copy) NSString * _Nullable label;
/// value of the event, must be non-negative.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// Init Event object
/// @param eventCategory :FSCategoryEvent
/// @param eventAction :String
/// @return instance object
- (nonnull instancetype)initWithEventCategory:(enum FSCategoryEvent)eventCategory eventAction:(NSString * _Nonnull)eventAction OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end


/// Represent item with a transaction. It must be sent after the corresponding transaction.
SWIFT_CLASS("_TtC8Flagship6FSItem")
@interface FSItem : FSTracking
/// Specifies the item price
@property (nonatomic, strong) NSNumber * _Nullable price;
/// Specifies the item quantity
@property (nonatomic, strong) NSNumber * _Nullable quantity;
/// Specifies the item category
@property (nonatomic, copy) NSString * _Nullable category;
/// Init Item object
/// @param transactionId :String
/// @param name :String
/// @return instance object
- (nonnull instancetype)initWithTransactionId:(NSString * _Nonnull)transactionId name:(NSString * _Nonnull)name code:(NSString * _Nonnull)code OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end


SWIFT_CLASS("_TtC8Flagship6FSPage") SWIFT_AVAILABILITY(ios,introduced=1.0,deprecated=2.0.4,message="FSScreen")
@interface FSPage : FSTracking
/// Init Page hit
/// @param location String
/// @return instance object
- (nonnull instancetype)init:(NSString * _Nonnull)location OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end


/// <code>PresetContext</code> class that represent a predefined keys of context
SWIFT_CLASS("_TtC8Flagship15FSPresetContext")
@interface FSPresetContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This hit should be sent each time a visitor arrives on a new screen.
SWIFT_CLASS("_TtC8Flagship8FSScreen")
@interface FSScreen : FSTracking
/// Init Screen hit
/// @param location String
/// @return instance object
- (nonnull instancetype)init:(NSString * _Nonnull)location OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end




/// Represent a hit Transaction
SWIFT_CLASS("_TtC8Flagship13FSTransaction")
@interface FSTransaction : FSTracking
/// Total revenue associated with the transaction. This value should include any shipping or tax costs
@property (nonatomic, strong) NSNumber * _Nullable revenue;
/// Specifies the total shipping cost of the transaction.
@property (nonatomic, strong) NSNumber * _Nullable shipping;
/// Specifies the total taxes of the transaction.
@property (nonatomic, strong) NSNumber * _Nullable tax;
/// Specifies the currency used for all transaction currency values. Value should be a valid ISO 4217 currency code.
@property (nonatomic, copy) NSString * _Nullable currency;
/// Specifies the coupon code used by the customer for the transaction.
@property (nonatomic, copy) NSString * _Nullable couponCode;
/// Specifies the payment method for the transaction.
@property (nonatomic, copy) NSString * _Nullable paymentMethod;
/// Specifies the shipping method of the transaction.
@property (nonatomic, copy) NSString * _Nullable shippingMethod;
/// Specifies the number of items for the transaction.
@property (nonatomic, strong) NSNumber * _Nullable itemCount;
/// Init transaction object
/// @param transactionId String
/// @param affiliation String
/// @return instance object
- (nonnull instancetype)initWithTransactionId:(NSString * _Nonnull)transactionId affiliation:(NSString * _Nonnull)affiliation OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull bodyTrack;
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, FSTypeTrack, open) {
  FSTypeTrackSCREEN = 0,
  FSTypeTrackTRANSACTION = 1,
  FSTypeTrackITEM = 2,
  FSTypeTrackEVENT = 3,
  FSTypeTrackNone = 4,
};

enum FlagshipResult : NSInteger;

/// <code>FlagShip</code> class helps you run FlagShip on your native iOS app.
SWIFT_CLASS("_TtC8Flagship8Flagship")
@interface Flagship : NSObject
/// Enable Logs, By default the log is enabled
@property (nonatomic) BOOL enableLogs;
@property (nonatomic) BOOL disabledSdk;
/// Shared instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Flagship * _Nonnull sharedInstance;)
+ (Flagship * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Start FlagShip
/// @param envId String environmentId id for client
/// @param apiKey String provided by abtasty apiKey
/// @param visitorId String visitor id @optional
/// @param FSConfig Object config @optional
/// @param onStartDone The block to be invoked when sdk is ready
- (void)startWithEnvId:(NSString * _Nonnull)envId apiKey:(NSString * _Nonnull)apiKey visitorId:(NSString * _Nullable)visitorId config:(FSConfig * _Nonnull)config onStartDone:(void (^ _Nonnull)(enum FlagshipResult))onStartDone;
/// //////////////////////////////////// SHIP VALUES /////////////////////////////////////////////////
/// Get Modification for boolean
/// \code
///  @param key associated with the modification
///  
///  @param default value returned when the key doesn’t match any modification value
///  
///  @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
///  
///  @return Boolean value
///
/// \endcode
- (BOOL)getModification:(NSString * _Nonnull)key defaultBool:(BOOL)defaultBool activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for string
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return String value
- (NSString * _Nonnull)getModification:(NSString * _Nonnull)key defaultString:(NSString * _Nonnull)defaultString activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for Double
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Double value
- (double)getModification:(NSString * _Nonnull)key defaultDouble:(double)defaultDouble activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for Float
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Float value
- (float)getModification:(NSString * _Nonnull)key defaulfloat:(float)defaulfloat activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for the integer
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Int value
- (NSInteger)getModification:(NSString * _Nonnull)key defaultInt:(NSInteger)defaultInt activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for an array
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Array [Any]
- (NSArray * _Nonnull)getModification:(NSString * _Nonnull)key defaultArray:(NSArray * _Nonnull)defaultArray activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
/// Get Modification for Json (Dictionary)
/// @param key associated with the modification
/// @param default value returned when the key doesn’t match any modification value
/// @param activate if ture, the sdk send automaticaly an activate event. if false you have to do it manualy
/// @return Dictionary<String,Any>, represent the json object
- (NSDictionary<NSString *, id> * _Nonnull)getModification:(NSString * _Nonnull)key defaultJson:(NSDictionary<NSString *, id> * _Nonnull)defaultJson activate:(BOOL)activate SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getModificationInfoWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Activate Modifications values
/// @key key which identifies the modification
- (void)activateModificationWithKey:(NSString * _Nonnull)key;
/// For Objective C Project, use the functions below to send Events
/// See https://developers.flagship.io/ios/#hit-tracking
/// Send Transaction event
/// \code
/// @param transacEvent : Transaction event
///
/// \endcode
- (void)sendTransactionEvent:(FSTransaction * _Nonnull)transacEvent;
/// Send Page event
/// @param pageEvent : Page event
- (void)sendScreenEvent:(FSScreen * _Nonnull)screenEvent;
/// Send Item event
/// @param itemEvent : Item event
- (void)sendItemEvent:(FSItem * _Nonnull)itemEvent;
/// Send event track
/// @param eventTrack : track event
- (void)sendEventTrack:(FSEvent * _Nonnull)eventTrack;
@end


@interface Flagship (SWIFT_EXTENSION(Flagship))
/// Use authenticate methode to go from Logged out  session to logged in session
/// \param visitorId newVisitorId to atuthenticate
///
/// \param visitorContext context for the user
///
/// \param sync callback will be invoked when the synchronize complete, by default the callBack is nil
///
- (void)authenticateVisitorWithVisitorId:(NSString * _Nonnull)visitorId visitorContext:(NSDictionary<NSString *, id> * _Nullable)visitorContext sync:(void (^ _Nullable)(enum FlagshipResult))sync;
/// Use authenticate methode to go from Logged in  session to logged out session
/// \param context input a new context if needed when log-out
///
/// \param onSynchronized Callback is called when the operation complete , by default is nil
///
- (void)unAuthenticateVisitorWithVisitorContext:(NSDictionary<NSString *, id> * _Nullable)visitorContext sync:(void (^ _Nullable)(enum FlagshipResult))sync;
@end



@interface Flagship (SWIFT_EXTENSION(Flagship))
/// //////////////////// Dictionary ///////////////////////////
- (void)updateContext:(NSDictionary<NSString *, id> * _Nonnull)contextValues;
/// // Update context without dictionary //////////////////////
- (void)synchronizeModificationsWithCompletion:(void (^ _Nonnull)(enum FlagshipResult))completion;
/// Get context for the visitor
///
/// returns:
/// Dictionary , an empty one if the context is empty
- (NSDictionary<NSString *, id> * _Nonnull)getVisitorContext SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Dictionary , an empty one if the modification is empty
- (NSDictionary<NSString *, id> * _Nonnull)getAllModification SWIFT_WARN_UNUSED_RESULT;
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, FlagshipError, open) {
  FlagshipErrorNone = 0,
  FlagshipErrorClientId_Error = 1,
  FlagshipErrorGetCampaignError = 2,
  FlagshipErrorStoredEventError = 3,
  FlagshipErrorCetScriptError = 4,
  FlagshipErrorScriptNotModified = 5,
  FlagshipErrorNetworkError = 6,
};

typedef SWIFT_ENUM(NSInteger, FlagshipMode, open) {
/// SDK is running in DECISION_API MODE
  FlagshipModeDECISION_API = 1,
/// SDK is running in BUCKETING MODE
  FlagshipModeBUCKETING = 2,
};

/// FlagShip State
/// <ul>
///   <li>
///     Ready   : The sdk is ready to use
///   </li>
///   <li>
///     NotReady: The not ready to use
///   </li>
///   <li>
///     Updated: The value for flagShip sdk are updated
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, FlagshipResult, open) {
/// Ready The sdk is ready to use
  FlagshipResultReady = 0,
/// The sdk is not ready, See logs for more informations
  FlagshipResultNotReady = 1,
/// Updated completed
  FlagshipResultUpdated = 2,
/// The sdk is disabled
  FlagshipResultDisabled = 3,
};


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
